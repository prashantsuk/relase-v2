name: Auto Release on PR Merge
on:
  pull_request:
    types: [closed]
    branches: [main, master]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.base.ref }}
        
    - name: Create Release Tag
      id: create_tag
      run: |
        # Get latest tag
        LATEST=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST"
        
        # Calculate next version
        VERSION=${LATEST#v}
        IFS='.' read -ra PARTS <<< "$VERSION"
        MAJOR=${PARTS[0]:-0}
        MINOR=${PARTS[1]:-0}
        PATCH=${PARTS[2]:-0}
        
        # Increment patch version
        NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
        echo "New version: $NEW_VERSION"
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Create and push tag
        git tag -a "$NEW_VERSION" -m "Auto release $NEW_VERSION"
        git push origin "$NEW_VERSION"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "latest_tag=$LATEST" >> $GITHUB_OUTPUT
        
    - name: Generate Release Notes
      id: release_notes
      run: |
        LATEST="${{ steps.create_tag.outputs.latest_tag }}"
        
        if [ "$LATEST" = "v0.0.0" ]; then
          COMMITS=$(git log --pretty=format:"- %s" --no-merges -10)
        else
          COMMITS=$(git log $LATEST..HEAD --pretty=format:"- %s" --no-merges)
        fi
        
        RELEASE_BODY="üöÄ **Auto-generated release from PR merge**

## üîó Pull Request
- **PR #${{ github.event.number }}**: ${{ github.event.pull_request.title }}
- **Author**: @${{ github.event.pull_request.user.login }}

## üìù Changes:
$COMMITS"

        echo "body<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.create_tag.outputs.version }}
        release_name: Release ${{ steps.create_tag.outputs.version }}
        body: ${{ steps.release_notes.outputs.body }}
        draft: false
        prerelease: false
